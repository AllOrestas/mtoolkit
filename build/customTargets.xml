<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml"/>
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml"/>

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>
	
	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<!-- <fail message="Please extract Eclipse distribution to build against in 'target/' folder."/> -->
		<echo message="Please extract Eclipse distribution to build against in 'target/' folder!"/>
		<echo message="[Trying to download eclipse base as backup plan]"/>
		
		<!-- fetches the Eclipse distribution from specified location -->
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
	</target>

	<target name="fetchm2eclipse" unless="m2eclipse.available">
		<property file="${builder}/build.properties"/>
		<delete dir="${extDirectory}/m2eclipse"/>
		<p2.mirror destination="file:/${extDirectory}/m2eclipse">
			<source>
				<repository location="${m2eclipse.repo}"/>
				<repository location="${eclipse.repo}"/>
				<repository location="http://download.eclipse.org/webtools/repository/helios/"/>
				<repository location="http://download.eclipse.org/tools/gef/updates/releases/"/>
				<repository location="http://download.eclipse.org/technology/m2e/releases/"/>
				<repository location="http://download.eclipse.org/tools/gef/updates/releases/"/>
				<repository location="http://m2eclipse.sonatype.org/sites/m2e/"/>
				<repository location="http://download.eclipse.org/tools/gef/updates/releases/"/>
				<repository location="http://download.eclipse.org/releases/indigo/"/>
			</source>
			<iu id="ch.qos.logback.classic"/>
			<iu id="ch.qos.logback.core"/>
			<iu id="ch.qos.logback.slf4j"/>
			<iu id="javax.activation"/>
			<iu id="javax.mail.glassfish"/>
			<iu id="javax.xml"/>
			<iu id="org.apache.xerces"/>
			<iu id="org.apache.xml.resolver"/>
			<iu id="org.apache.xml.serializer"/>
			<iu id="org.eclipse.emf.common.ui"/>
			<iu id="org.eclipse.emf.common"/>
			<iu id="org.eclipse.emf.ecore.change"/>
			<iu id="org.eclipse.emf.edit.ui"/>
			<iu id="org.eclipse.equinox.p2.discovery.compatibility"/>
			<iu id="org.eclipse.equinox.p2.discovery"/>
			<iu id="org.eclipse.equinox.p2.ui.discovery"/>
			<iu id="org.eclipse.m2e.logback.appender"/>
			<iu id="org.eclipse.m2e.logback.configuration"/>
			<iu id="org.eclipse.wst.common.core"/>
			<iu id="org.eclipse.wst.common.environment"/>
			<iu id="org.eclipse.wst.common.frameworks"/>
			<iu id="org.eclipse.wst.common.project.facet.core"/>
			<iu id="org.eclipse.wst.common.ui"/>
			<iu id="org.eclipse.wst.common.uriresolver"/>
			<iu id="org.eclipse.wst.sse.ui"/>
			<iu id="org.eclipse.wst.validation"/>
			<iu id="org.eclipse.wst.xml.ui"/>
			<iu id="org.eclipse.wst.xsd.core"/>
			<iu id="org.eclipse.xsd"/>
			<iu id="org.sat4j.core"/>
			<iu id="org.sat4j.pb"/>
			<iu id="org.slf4j.api"/>
			<iu id="org.maven.ide.eclipse.archetype_common"/>
			<iu id="org.maven.ide.eclipse"/>
			<iu id="org.maven.ide.eclipse.launching"/>
			<iu id="org.maven.ide.eclipse.jdt"/>
			<iu id="org.maven.ide.eclipse.dependency_tree"/>
			<iu id="org.maven.ide.eclipse.editor"/>
			<iu id="org.maven.ide.eclipse.editor.xml"/>
			<iu id="org.maven.ide.eclipse.maven_embedder"/>
			<iu id="org.maven.ide.eclipse.refactoring"/>
			<iu id="org.eclipse.emf.ecore"/>
			<iu id="org.eclipse.emf.ecore.xmi"/>
			<iu id="org.eclipse.emf.edit"/>
			<iu id="org.eclipse.emf.ecore.edit"/>
			<iu id="org.eclipse.wst.common.emf"/>
			<iu id="org.eclipse.wst.sse.core"/>
			<iu id="org.eclipse.wst.xml.core"/>
			<iu id="org.eclipse.jem.util"/>
			<iu id="org.eclipse.platform"/>
			<iu id="org.eclipse.rcp"/>
			<iu id="org.eclipse.jdt"/>
			<iu id="org.eclipse.m2e.archetype.common"/>
			<iu id="org.eclipse.m2e.maven.indexer"/>
			<iu id="org.eclipse.m2e.model.edit"/>
			<iu id="org.eclipse.m2e.core"/>
			<iu id="org.eclipse.m2e.launching"/>
			<iu id="org.eclipse.m2e.jdt"/>
			<iu id="org.eclipse.m2e.editor"/>
			<iu id="org.eclipse.m2e.editor.xml"/>
			<iu id="org.eclipse.m2e.maven.runtime"/>
			<iu id="org.eclipse.m2e.refactoring"/>
			<iu id="org.eclipse.m2e.lifecyclemapping.defaults"/>
			<iu id="org.eclipse.m2e.discovery"/>
			<iu id="org.eclipse.m2e.core.ui"/>
			<iu id="org.eclipse.m2e.scm"/>
			<iu id="org.eclipse.m2e.usagedata"/>
			<iu id="com.ning.async-http-client"/>
			<iu id="org.jboss.netty"/>
			<iu id="org.maven.ide.eclipse.nexus_indexer"/>
			<iu id="org.maven.ide.eclipse.maven_model_edit"/>
			<iu id="org.maven.ide.eclipse.pr"/>
			<slicingOptions followStrict="true"/>
		</p2.mirror>
		<p2.repo2runnable>
			<repository location="file:/${extDirectory}/m2eclipse/exploded"/>
			<source>
				<repository location="file:/${extDirectory}/m2eclipse"/>
			</source>
		</p2.repo2runnable>
		<zip destfile="${extDirectory}/externals-m2eclipse.zip">
			<fileset dir="${extDirectory}/m2eclipse/exploded" includes="features/**, plugins/**"/>
		</zip>
	</target>


	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<available file="${extDirectory}/externals-m2eclipse.zip" property="m2eclipse.available"/>
		<antcall target="fetchm2eclipse"/>
		<antcall target="prepareDependencies"/>
		<antcall target="prepareSources" />
		<antcall target="getBaseComponents" />
	</target>
	
	<target name="prepareSources">
		<delete dir="${buildDirectory}"/>
		<copy todir="${buildDirectory}">
			<fileset dir="${sourceRepDirectory}">
				<exclude name="plugins/**/bin/**"/>
				<exclude name="plugins/**/eclipse_compile/**"/>
			</fileset>
		</copy>
		<copy todir="${buildDirectory}/plugins">
			<fileset dir="${docsDirectory}"/>
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the repositories have been processed -->
	<!-- ===================================================================== -->
	<target name="postProcessRepos">
	</target>
	
	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="gatherBuildArtifacts" />
	</target>
	
	<target name="gatherBuildArtifacts">
		<mkdir dir="${distDirectory}"/>
		<delete dir="${distDirectory}/${p2.repository.folder}"/>
		<copy todir="${distDirectory}">
			<fileset dir="${buildDirectory}">
				<!-- archive file format -->
				<include name="${buildLabel}/**/*"/>
			</fileset>
		</copy>
		<delete file="${base}/artifacts.xml"/>
		<p2.mirror destination="file:/${distDirectory}/${p2.repository.folder}">
			<source>
				<repository location="file:/${buildDirectory}/${p2.repository.folder}/"/>
				<repository location="file:/${base}/"/>
				<repository location="file:/${base.ext}/"/>
			</source>
			<iu id="org.tigris.mtoolkit.sdk.feature.group"/>
			<iu id="org.tigris.mtoolkit.maven.sdk.feature.group"/>
      <slicingOptions platformFilter="true" includeOptional="false" includeNonGreedy="false" followStrict="true" />
		</p2.mirror>
		<!-- move the build zip to the top level dist/ folder -->
		<move todir="${distDirectory}">
			<fileset dir="${distDirectory}/${buildLabel}" includes="*.zip"/>
		</move>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

	<target name="prepareDependencies" description="Extract dependencies in externals">
		<!-- TODO: Add ability to stop fetching the depedencies each time -->
		
		<!-- Fetch Externals -->
		<delete dir="${base.ext}"/>
		<mkdir dir="${base.ext}"/>
		<unzip dest="${base.ext}">
			<filelist dir="${extDirectory}" files="${externals}"/>
		</unzip>
	</target>
	
</project>
